# Fodinha Card Game - Codebase Overview

## Introduction
Fodinha is a Brazilian trick-taking card game where players bet on how many tricks they'll win each round. The game uses a 40-card deck (4s through Aces) and features a dynamic "manilha" (trump card) system that changes each round. Players start with a set number of lives and lose lives when their actual tricks won differs from their bet. The goal is to be the last player standing.

## Architecture Overview
The project uses a hybrid architecture:
- **Backend**: Python Flask server that handles game logic
- **Frontend**: Next.js (React) web application
- **Communication**: REST API endpoints with polling for state updates

## Backend (Python)

### Core Files
- `backend/game_logic.py`: Contains the core game mechanics, card representation, and trick evaluation logic
- `backend/server.py`: Flask server with API endpoints for game operations
- `backend/app.py`: Alternative server implementation

### Game Logic
The game logic includes:
- Card representation with suits (♣, ♥, ♠, ♦) and values (4-A, 2, 3)
- Trump card ("manilha") determination
- Card strength calculation based on rank and suit
- Trick resolution with tie-breaking mechanisms
- Player elimination when lives reach zero

### API Endpoints
- `/api/create-game`: Creates a new game session
- `/api/join-game/<game_id>`: Allows players to join an existing game
- `/api/start-round/<game_id>`: Deals cards and begins a new round
- `/api/make-bet/<game_id>`: Records a player's bet for the round
- `/api/play-card/<game_id>`: Processes a played card and updates game state
- `/api/game-state/<game_id>`: Provides the current game state

## Frontend (Next.js/React)

### Key Components
- `components/Game.tsx`: Main game interface component (1697 lines)
- `pages/index.tsx`: Home page with game creation/joining functionality
- `pages/_app.tsx`: Application wrapper with socket context provider
- `styles/Game.module.css`: Game component styling
- `styles/Home.module.css`: Home page styling

### State Management
The frontend uses React hooks for state management:
- `useState` for component-specific state
- `useEffect` for side effects like API calls
- `useContext` for socket communication
- Custom debounce logic to prevent duplicate actions

### Data Persistence
- `pages/api/persistent-store.ts`: Server-side data storage for game states
- Uses `lowdb` for storage with different backends (memory in production, file in development)
- Implements caching to reduce database load

## Game Flow

1. **Game Creation**:
   - A player creates a game, setting the number of lives
   - Players join the game lobby using a unique game ID
   - Host starts the game when ready

2. **Round Structure**:
   - Cards are dealt to players (starting with 1 card, increasing each round)
   - A card is revealed to determine the "manilha" (trump suit)
   - Players make bets on how many tricks they'll win
   - The last player's bet cannot make the total bets equal the number of cards

3. **Trick Play**:
   - Players take turns playing cards
   - Highest card wins the trick (manilha ranks highest)
   - Ties "cancel" the cards, with a multiplier applied to the next trick
   - If a final hand ends in a tie, the highest suit wins

4. **Scoring**:
   - After all tricks are played, players lose lives based on |bet - tricks won|
   - Players with 0 lives are eliminated
   - The dealer rotates each round

5. **Game Progression**:
   - Cards dealt increases by 1 each round up to a maximum
   - Then decreases back to 1
   - Last player with lives remaining wins

## Technical Challenges & Solutions

1. **State Synchronization**:
   - Polling mechanism to update game state
   - Debounced actions to prevent race conditions
   - Optimistic updates for better user experience

2. **Error Handling**:
   - Connection error detection and recovery
   - Retry mechanisms for failed API calls
   - Clear user feedback for errors

3. **Persistent Storage**:
   - In-memory caching with TTL for performance
   - File-based persistence in development
   - Connection pooling to handle concurrent requests

## Future Improvement Opportunities

1. **Real-time Communication**:
   - Implement WebSockets for true real-time updates instead of polling
   - Add presence indicators to show which players are active

2. **UI Enhancements**:
   - Add animations for card plays and trick resolution
   - Improve mobile responsiveness
   - Add sound effects for game events

3. **Game Features**:
   - Implement spectator mode
   - Add game history and statistics
   - Support for custom rules and variants

4. **Performance Optimization**:
   - Optimize card rendering for mobile devices
   - Implement server-side caching for frequent requests
   - Reduce unnecessary re-renders

5. **Code Refactoring**:
   - Split Game.tsx into smaller components
   - Implement a proper state management solution (Redux, Zustand)
   - Add comprehensive test coverage

## Known Issues

1. "Objects are not valid as a React child" error when rendering complex objects directly
2. Potential race conditions during rapid state changes
3. Temporary disconnections may lead to desynchronized game state
4. High CPU usage due to frequent polling

## Deployment Notes

The application uses environment-aware storage:
- Development: File-based storage (db.json)
- Production: In-memory storage with optimized caching

The project is designed to work with Render deployment with persistent file-based storage. 